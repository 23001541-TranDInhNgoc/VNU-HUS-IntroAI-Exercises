import heapq

goal = "12345678_"
moves = {
    0: [1, 3],
    1: [0, 2, 4],
    2: [1, 5],
    3: [0, 4, 6],
    4: [1, 3, 5, 7],
    5: [2, 4, 8],
    6: [3, 7],
    7: [4, 6, 8],
    8: [5, 7]
}

def get_neighbors(state):
    idx = state.index('_')
    result = []
    for m in moves[idx]:
        s = list(state)
        s[idx], s[m] = s[m], s[idx]
        result.append("".join(s))
    return result

# --- Heuristic h1: số ô sai vị trí ---
def h1(state):
    return sum(1 for i in range(9) if state[i] != goal[i] and state[i] != '_')

# --- Heuristic h2: khoảng cách Manhattan ---
def h2(state):
    dist = 0
    for i, c in enumerate(state):
        if c != '_' and c != goal[i]:
            goal_index = goal.index(c)
            x1, y1 = divmod(i, 3)
            x2, y2 = divmod(goal_index, 3)
            dist += abs(x1 - x2) + abs(y1 - y2)
    return dist

# --- Thuật toán A* ---
def astar(start, heuristic):
    pq = []
    heapq.heappush(pq, (heuristic(start), 0, start, [start]))
    visited = {start: 0}
    while pq:
        f, g, state, path = heapq.heappop(pq)
        if state == goal:
            return path
        for nxt in get_neighbors(state):
            new_g = g + 1
            if nxt not in visited or new_g < visited[nxt]:
                visited[nxt] = new_g
                heapq.heappush(pq, (new_g + heuristic(nxt), new_g, nxt, path + [nxt]))
    return None

# --- Test ---
start = "2831647_5"

print("A* với h1 (misplaced tiles):")
print(astar(start, h1))

print("\nA* với h2 (Manhattan distance):")
print(astar(start, h2))


